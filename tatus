[1mdiff --git a/app.py b/app.py[m
[1mindex 6b72080..cb9fb7d 100644[m
[1m--- a/app.py[m
[1m+++ b/app.py[m
[36m@@ -219,12 +219,7 @@[m [mdef education():[m
 @app.route('/solutions')[m
 def solutions():[m
     return render_template('solutions.html')[m
[31m-@app.route('/roadmap')[m
[31m-def roadmap():[m
[31m-    return render_template('roadmap.html')[m
[31m-@app.route('/reports')[m
[31m-def reports():[m
[31m-    return render_template('reports.html')[m
[32m+[m
 @app.route('/api/solutions_data')[m
 def solutions_data():[m
     """API endpoint to provide solutions data to frontend"""[m
[36m@@ -238,7 +233,7 @@[m [mdef get_assessments():[m
         cursor = conn.cursor()[m
         [m
         cursor.execute('''[m
[31m-            SELECT id, company_name, industry, first_name, last_name, email, [m
[32m+[m[32m            SELECT id, company_name, industry, first_name, last_name, email, phone,[m
                    ai_score, created_at, challenges, opportunities[m
             FROM assessments [m
             ORDER BY created_at DESC[m
[36m@@ -250,12 +245,14 @@[m [mdef get_assessments():[m
                 'id': row[0],[m
                 'company_name': row[1],[m
                 'industry': row[2],[m
[31m-                'contact_name': f"{row[3]} {row[4]}",[m
[32m+[m[32m                'first_name': row[3],[m
[32m+[m[32m                'last_name': row[4],[m
                 'email': row[5],[m
[31m-                'ai_score': row[6],[m
[31m-                'created_at': row[7],[m
[31m-                'challenges': json.loads(row[8]) if row[8] else [],[m
[31m-                'opportunities': json.loads(row[9]) if row[9] else [][m
[32m+[m[32m                'phone': row[6],[m
[32m+[m[32m                'ai_score': row[7],[m
[32m+[m[32m                'created_at': row[8],[m
[32m+[m[32m                'challenges': json.loads(row[9]) if row[9] else [],[m
[32m+[m[32m                'opportunities': json.loads(row[10]) if row[10] else [][m
             })[m
         [m
         conn.close()[m
[36m@@ -333,6 +330,109 @@[m [mdef get_assessment_by_email(email):[m
         [m
     except Exception as e:[m
         return jsonify({'success': False, 'error': str(e)})[m
[32m+[m
[32m+[m[32m@app.route('/api/assessment/notes', methods=['POST'])[m
[32m+[m[32mdef save_client_notes():[m
[32m+[m[32m    """Save client notes for an assessment"""[m
[32m+[m[32m    try:[m
[32m+[m[32m        data = request.get_json()[m
[32m+[m[32m        assessment_id = data.get('assessment_id')[m
[32m+[m[32m        client_notes = data.get('client_notes', '')[m
[32m+[m[41m        [m
[32m+[m[32m        if not assessment_id:[m
[32m+[m[32m            return jsonify({'success': False, 'error': 'Assessment ID is required'})[m
[32m+[m[41m        [m
[32m+[m[32m        conn = sqlite3.connect('ai_consultant.db')[m
[32m+[m[32m        cursor = conn.cursor()[m
[32m+[m[41m        [m
[32m+[m[32m        cursor.execute('''[m
[32m+[m[32m            UPDATE assessments[m[41m [m
[32m+[m[32m            SET client_notes = ?[m
[32m+[m[32m            WHERE id = ?[m
[32m+[m[32m        ''', (client_notes, assessment_id))[m
[32m+[m[41m        [m
[32m+[m[32m        conn.commit()[m
[32m+[m[32m        conn.close()[m
[32m+[m[41m        [m
[32m+[m[32m        return jsonify({'success': True, 'message': 'Client notes saved successfully'})[m
[32m+[m[41m        [m
[32m+[m[32m    except Exception as e:[m
[32m+[m[32m        return jsonify({'success': False, 'error': str(e)})[m
[32m+[m
[32m+[m[32m@app.route('/api/assessment/regenerate_report', methods=['POST'])[m
[32m+[m[32mdef regenerate_report_with_notes():[m
[32m+[m[32m    """Regenerate report with client notes included in LLM context"""[m
[32m+[m[32m    try:[m
[32m+[m[32m        data = request.get_json()[m
[32m+[m[32m        assessment_id = data.get('assessment_id')[m
[32m+[m[32m        include_notes = data.get('include_notes', True)[m
[32m+[m[41m        [m
[32m+[m[32m        if not assessment_id:[m
[32m+[m[32m            return jsonify({'success': False, 'error': 'Assessment ID is required'})[m
[32m+[m[41m        [m
[32m+[m[32m        # Get assessment data including client notes[m
[32m+[m[32m        conn = sqlite3.connect('ai_consultant.db')[m
[32m+[m[32m        cursor = conn.cursor()[m
[32m+[m[41m        [m
[32m+[m[32m        cursor.execute('SELECT * FROM assessments WHERE id = ?', (assessment_id,))[m
[32m+[m[32m        row = cursor.fetchone()[m
[32m+[m[41m        [m
[32m+[m[32m        if not row:[m
[32m+[m[32m            return jsonify({'success': False, 'error': 'Assessment not found'})[m
[32m+[m[41m        [m
[32m+[m[32m        # Get column names for dynamic field mapping[m
[32m+[m[32m        columns = [description[0] for description in cursor.description][m
[32m+[m[32m        assessment = dict(zip(columns, row))[m
[32m+[m[41m        [m
[32m+[m[32m        conn.close()[m
[32m+[m[41m        [m
[32m+[m[32m        # Include client notes in assessment data for LLM context[m
[32m+[m[32m        assessment_data = {[m
[32m+[m[32m            'company_name': assessment.get('company_name'),[m
[32m+[m[32m            'industry': assessment.get('industry'),[m
[32m+[m[32m            'company_size': assessment.get('company_size'),[m
[32m+[m[32m            'role': assessment.get('role'),[m
[32m+[m[32m            'challenges': assessment.get('challenges', []),[m
[32m+[m[32m            'current_tech': assessment.get('current_tech'),[m
[32m+[m[32m            'ai_experience': assessment.get('ai_experience'),[m
[32m+[m[32m            'budget': assessment.get('budget'),[m
[32m+[m[32m            'timeline': assessment.get('timeline'),[m
[32m+[m[32m            'first_name': assessment.get('first_name'),[m
[32m+[m[32m            'last_name': assessment.get('last_name'),[m
[32m+[m[32m            'email': assessment.get('email'),[m
[32m+[m[32m            'phone': assessment.get('phone'),[m
[32m+[m[32m            'client_notes': assessment.get('client_notes', '') if include_notes else ''[m
[32m+[m[32m        }[m
[32m+[m[41m        [m
[32m+[m[32m        # Generate enhanced report with client notes context[m
[32m+[m[32m        report_generator = ReportGenerator()[m
[32m+[m[32m        report_data = report_generator.generate_assessment_report_data(assessment_data)[m
[32m+[m[41m        [m
[32m+[m[32m        # Generate HTML report[m
[32m+[m[32m        report_html = generate_html_assessment_report(assessment_id, assessment_data, report_data['ai_score'], report_data['opportunities'])[m
[32m+[m[41m        [m
[32m+[m[32m        # Save the HTML report[m
[32m+[m[32m        company_name = assessment.get('company_name', 'Unknown').replace(' ', '_').replace('/', '_')[m
[32m+[m[32m        created_at = datetime.now().strftime('%Y%m%d_%H%M%S')[m
[32m+[m[41m        [m
[32m+[m[32m        filename = f"{assessment_id}_{company_name}_assessment_notes_{created_at}.html"[m
[32m+[m[32m        filename = secure_filename(filename)[m
[32m+[m[41m        [m
[32m+[m[32m        filepath = os.path.join(REPORTS_DIR, filename)[m
[32m+[m[41m        [m
[32m+[m[32m        with open(filepath, 'w', encoding='utf-8') as f:[m
[32m+[m[32m            f.write(report_html)[m
[32m+[m[41m        [m
[32m+[m[32m        return jsonify({[m
[32m+[m[32m            'success': True,[m
[32m+[m[32m            'message': 'Report regenerated with client notes',[m
[32m+[m[32m            'filename': filename,[m
[32m+[m[32m            'download_url': f'/download_report/{filename}'[m
[32m+[m[32m        })[m
[32m+[m[41m        [m
[32m+[m[32m    except Exception as e:[m
[32m+[m[32m        return jsonify({'success': False, 'error': str(e)})[m
[32m+[m
 @app.route('/generate_report_from_assessment', methods=['POST'])[m
 def generate_report_from_assessment():[m